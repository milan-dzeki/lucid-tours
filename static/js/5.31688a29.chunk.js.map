{"version":3,"sources":["components/UI/ErrorModal/ErrorModal.js","components/UI/Spinner/Spinner.js","components/UI/RedirectModal/RedirectModal.js","custom-hooks/useRedirectModal.js","components/UI/Form/Form.js","components/UI/Input/Input.js","pages/RequestTour/RequestTour.js"],"names":["ErrorModal","props","show","errorModalShow","backdropClicked","errorModalClosed","mountOnEnter","unmountOnExit","in","timeout","classNames","className","errorModalMsg","type","onClick","Spinner","RedirectModal","dispatch","useDispatch","redirectModalShow","redirectModalClosed","redirectModalTitle","to","actions","useRedirectModal","useState","setRedirectModalShow","showRedirectModal","hideRedirectModal","Form","formClassname","children","style","display","signUpButtonShown","disabled","formIsValid","formSubmitHandler","formBtnText","Input","elementType","elementConfig","inputChanged","inputUnfocused","value","disabledInfo","defaultValue","readOnly","shouldValidate","inputTouched","inputValid","inputWarning","inputWarningShown","inputWarningShowHandler","inputFieldClasses","push","input","warningMessageClasses","join","atributes","onChange","onBlur","htmlFor","label","for","name","id","hidden","options","map","option","uuid","reducer","state","action","requestForm","countries","country","touched","valid","countryIsValid","cities","cityIsValid","states","city","RequireTour","reduxDispatch","csc","getAllCountries","getAllStates","isAuth","useSelector","auth","token","userID","isLoading","requestTour","loading","isError","error","checkInputValidity","rules","required","trim","useReducer","onChangeHandler","defaultCityValue","countryCode","find","isoCode","validation","getStatesOfCountry","getCitiesOfCountry","length","cityFieldValid","selectedState","stateCode","citiesByState","getCitiesOfState","isValid","useEffect","formValidity","validValues","key","forEach","formElements","config","form","e","preventDefault","tourData","code","userId","element","event","target","textAlign","paddingBottom","fontSize","marginBottom","backgroundColor","width","margin","padding","color","fontWeight","borderRadius","titleClassname","icon","titleText","titleAdditional","textDecoration"],"mappings":"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","file":"static/js/5.31688a29.chunk.js","sourcesContent":["import React from 'react';\r\nimport './error-modal.scss';\r\nimport '../../../sass-additions/helper-classes.scss';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\n\r\nconst ErrorModal = props => {\r\n  return (\r\n    <>\r\n      <Backdrop\r\n        show={props.errorModalShow}\r\n        backdropClicked={props.errorModalClosed} />\r\n      <CSSTransition\r\n        mountOnEnter\r\n        unmountOnExit\r\n        in={props.errorModalShow}\r\n        timeout={300}\r\n        classNames=\"show\">\r\n        <div className=\"error-modal\">\r\n          <p className=\"error-modal__title\">\r\n            Error occured\r\n          </p>\r\n          <p className=\"error-modal__message\">\r\n            {props.errorModalMsg}\r\n          </p>\r\n          <button \r\n            type=\"button\"\r\n            className=\"error-modal__btn\"\r\n            onClick={props.errorModalClosed}>\r\n              OK\r\n            </button>\r\n        </div>\r\n      </CSSTransition>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ErrorModal\r\n","import React from 'react';\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      loading...\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport './redirect-modal.scss';\r\nimport '../../../sass-additions/helper-classes.scss';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nconst RedirectModal = props => {\r\n  const dispatch = useDispatch();\r\n  // logout action\r\n  const onLogout = () => dispatch(actions.logout());\r\n  // logout and close modal\r\n  const logoutAndCloseModal = () => {\r\n    onLogout();\r\n    props.redirectModalClosed();\r\n  };\r\n  return (\r\n    <>\r\n      <Backdrop\r\n        show={props.redirectModalShow}\r\n        backdropClicked={props.redirectModalClosed} />\r\n      <CSSTransition\r\n        mountOnEnter\r\n        unmountOnExit\r\n        in={props.redirectModalShow}\r\n        timeout={300}\r\n        classNames=\"show\">\r\n        <div className=\"redirect-modal\">\r\n          <h3 className=\"redirect-modal__title\">\r\n            {props.redirectModalTitle}\r\n          </h3>\r\n          <div className=\"redirect-modal__content\">\r\n            <Link to=\"/\" onClick={props.redirectModalClosed}>go home</Link>\r\n            <Link to=\"/your-page\" onClick={props.redirectModalClosed}>go to your page</Link>\r\n            <Link to=\"/tours\" onClick={props.redirectModalClosed}>view tours</Link>\r\n            <Link to=\"/leave-review\" onClick={props.redirectModalClosed}>leave review</Link>\r\n            <Link to=\"/request-tour\" onClick={props.redirectModalClosed}>request tour</Link>\r\n            <button \r\n              className=\"redirect-modal__logout\"\r\n              onClick={logoutAndCloseModal}>logout</button>\r\n          </div>\r\n          <button \r\n            className=\"redirect-modal__btn\"\r\n            onClick={props.redirectModalClosed}>\r\n            close\r\n          </button>\r\n        </div>\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RedirectModal;\r\n","import { useState } from 'react';\r\n\r\nexport const useRedirectModal = () => {\r\n  const [redirectModalShow, setRedirectModalShow] = useState(false);\r\n\r\n  const showRedirectModal = () => {\r\n    setRedirectModalShow(true);\r\n  };\r\n  const hideRedirectModal = () => {\r\n    setRedirectModalShow(false);\r\n  };\r\n\r\n  return {\r\n    redirectModalShow,\r\n    showRedirectModal,\r\n    hideRedirectModal\r\n  };\r\n};","import React from 'react';\r\nimport './form.scss';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form className={`form form__${props.formClassname}`}>\r\n      {props.children}\r\n      <button \r\n        type=\"submit\"\r\n        className=\"form__submit-btn\"\r\n        style={{display: props.signUpButtonShown ? \"none\" : \"block\"}}\r\n        disabled={!props.formIsValid}\r\n        onClick={props.formSubmitHandler}>\r\n        {props.formBtnText}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './input.scss';\r\nimport { v4 as uuid} from 'uuid';\r\nimport { RiErrorWarningLine } from 'react-icons/ri';\r\n\r\nconst Input = ({elementType, elementConfig, inputChanged, inputUnfocused, value, disabledInfo, defaultValue, readOnly, shouldValidate, inputTouched, inputValid, inputWarning, inputWarningShown, inputWarningShowHandler}) => {\r\n  let inputFieldClasses = [\"generic-input__field\"];\r\n\r\n  if(shouldValidate && inputTouched && inputValid) {\r\n    inputFieldClasses.push(\"field-valid\");\r\n  }\r\n  if(shouldValidate && inputTouched && !inputValid) {\r\n    inputFieldClasses.push(\"field-invalid\");\r\n  }\r\n  let input = null;\r\n\r\n  let warningMessageClasses = [\"generic-input__message\"];\r\n\r\n  if(inputWarningShown) {\r\n    warningMessageClasses.push(\"warning-shown\");\r\n  }\r\n\r\n  switch(elementType) {\r\n    case \"inputText\":\r\n      input = (\r\n        <div className=\"generic-input\">\r\n          <div className={warningMessageClasses.join(\" \")}>\r\n            <div className=\"generic-input__message-icon\">\r\n              <RiErrorWarningLine />\r\n            </div>\r\n            <p className=\"generic-input__message-text\">\r\n              {inputWarning}\r\n            </p>\r\n          </div>\r\n          <input \r\n            className={inputFieldClasses.join(\" \")} \r\n            {...elementConfig.atributes} \r\n            value={value} \r\n            readOnly={readOnly} \r\n            onChange={inputChanged} \r\n            disabled={disabledInfo}\r\n            onBlur={inputUnfocused}\r\n            onClick={inputWarningShowHandler} />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"inputNumber\":\r\n      input = (\r\n        <div className=\"generic-input\">\r\n          <label htmlFor={elementConfig.label.for} style={{display: elementConfig.label.show ? \"block\" : \"none\"}}>\r\n            {elementConfig.label.name}\r\n          </label>\r\n          <input \r\n            className={inputFieldClasses.join(\" \")} \r\n            {...elementConfig.atributes} \r\n            value={value} \r\n            readOnly={readOnly} \r\n            onChange={inputChanged} \r\n            disabled={disabledInfo}\r\n            onBlur={inputUnfocused}\r\n            onClick={inputWarningShowHandler} />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      input = (\r\n        <div className=\"generic-input\">\r\n          <label htmlFor={elementConfig.label.for}>\r\n            {elementConfig.label.name}\r\n          </label>\r\n          <textarea id={elementConfig.label.for} {...elementConfig.atributes} value={value} className={inputFieldClasses.join(\" \")} onChange={inputChanged} onBlur={inputUnfocused}></textarea>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"select\":\r\n      input = (\r\n        <div className={`generic-input ${disabledInfo && \"field-disabled\"}`}>\r\n          <label \r\n            htmlFor={elementConfig.label.for}>\r\n            {elementConfig.label.name}\r\n          </label>\r\n          <select\r\n            className=\"generic-input__field\"\r\n            id={elementConfig.label.for}\r\n            name={elementConfig.atributes.name}\r\n            value={value || \"default\"}\r\n            onChange={inputChanged}\r\n            disabled={disabledInfo}>\r\n              <option \r\n                value=\"choose\" \r\n                hidden>\r\n                {defaultValue}\r\n              </option>\r\n            {elementConfig.options.map(option => (\r\n              <option\r\n                key={uuid()}\r\n                value={option.name}>\r\n                {option.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      );\r\n      break;\r\n    default:\r\n      input = <input />;\r\n  }\r\n  return input;\r\n}\r\n\r\nexport default Input;\r\n","import React, { useEffect, useReducer } from 'react';\r\nimport './request-tour.scss';\r\nimport csc from 'country-state-city';\r\n// import { ICountry, IState, ICity } from 'country-state-city';\r\nimport SectionTitle from '../../components/SectionTitle/SectionTitle';\r\nimport Form from '../../components/UI/Form/Form';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport ErrorModal from '../../components/UI/ErrorModal/ErrorModal';\r\nimport RedirectModal from '../../components/UI/RedirectModal/RedirectModal';\r\nimport { AiOutlinePullRequest } from 'react-icons/ai';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRedirectModal } from '../../custom-hooks/useRedirectModal';\r\nimport * as actions from '../../store/actions/index';\r\n\r\n//reducer \r\nconst reducer = (state, action) => {\r\n  switch(action.type) {\r\n    case(\"COUNTRY_CHANGED\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          countries: {\r\n            ...state.requestForm.countries,\r\n            value: action.country,\r\n            touched: action.touched,\r\n            valid: action.countryIsValid\r\n          },\r\n          cities: {\r\n            ...state.requestForm.cities,\r\n            valid: action.cityIsValid\r\n          }\r\n        }\r\n      };\r\n    case(\"STATE_CHANGED\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          states: {\r\n            ...state.requestForm.states,\r\n            value: action.state\r\n          }\r\n        }\r\n      };\r\n    case(\"CITY_CHANGED\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          cities: {\r\n            ...state.requestForm.cities,\r\n            value: action.city,\r\n            touched: action.touched,\r\n            valid: action.valid\r\n          }\r\n        }\r\n      };\r\n    case(\"GET_STATES_BY_COUNTRY\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          states: {\r\n            ...state.requestForm.states,\r\n            elementConfig: {\r\n              ...state.requestForm.states.elementConfig,\r\n              options: action.states\r\n            },\r\n            disabled: false\r\n          },\r\n          cities: {\r\n            ...state.requestForm.cities,\r\n            elementConfig: {\r\n              ...state.requestForm.cities.elementConfig,\r\n              options: []\r\n            },\r\n            disabled: true,\r\n            valid: action.cityIsValid\r\n          }\r\n        }\r\n      };\r\n    case(\"GET_CITIES_BY_COUNTRY\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          states: {\r\n            ...state.requestForm.states,\r\n            elementConfig: {\r\n              ...state.requestForm.states.elementConfig,\r\n              options: []\r\n            },\r\n            disabled: true\r\n          },\r\n          cities: {\r\n            ...state.requestForm.cities,\r\n            elementConfig: {\r\n              ...state.requestForm.cities.elementConfig,\r\n              options: action.cities\r\n            },\r\n            disabled: false,\r\n            valid: action.cityIsValid,\r\n            defaultValue: action.defaultValue\r\n          }\r\n        }\r\n      };\r\n    case(\"GET_CITIES_BY_STATE\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          cities: {\r\n            ...state.requestForm.cities,\r\n            elementConfig: {\r\n              ...state.requestForm.cities.elementConfig,\r\n              options: action.cities\r\n            },\r\n            disabled: false,\r\n            valid: action.valid,\r\n            defaultValue: action.defaultValue\r\n          }\r\n        }\r\n      };\r\n    case(\"CLEAR_INPUT_FIELDS\"):\r\n      return {\r\n        ...state,\r\n        requestForm: {\r\n          ...state.requestForm,\r\n          countries: {\r\n            ...state.requestForm.countries,\r\n            value: \"\",\r\n            touched: false,\r\n            valid: false\r\n          },\r\n          states: {\r\n            ...state.requestForm.states,\r\n            value: \"\",\r\n            touched: false\r\n          },\r\n          cities: {\r\n            ...state.requestForm.cities,\r\n            value: \"\",\r\n            touched: false,\r\n            valid: false\r\n          }\r\n        }\r\n      }\r\n    case(\"FORM_VALIDITY\"):\r\n      return {\r\n        ...state,\r\n        formIsValid: action.formIsValid\r\n      };\r\n    case(\"INVALIDATE_FORM\"):\r\n      return {\r\n        ...state,\r\n        formIsValid: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst RequireTour = props => {\r\n  const reduxDispatch = useDispatch();\r\n  // get countries from npm package\r\n  const countries = csc.getAllCountries();\r\n  const states = csc.getAllStates();\r\n\r\n  // redux state\r\n  const isAuth = useSelector(state => state.auth.token);\r\n  const userID = useSelector(state => state.auth.userID);\r\n  const isLoading = useSelector(state => state.requestTour.loading);\r\n  const isError = useSelector(state => state.requestTour.error);\r\n  // redux clear request error\r\n  const onClearRequestError = () => reduxDispatch(actions.reqClearError());\r\n\r\n  // use redirect modal\r\n  const {redirectModalShow, showRedirectModal, hideRedirectModal} = useRedirectModal();\r\n  \r\n  // check input fields valitidy\r\n  const checkInputValidity = (rules, value) => {\r\n    let valid = true;\r\n\r\n    if(!rules.required) {\r\n      return true;\r\n    }\r\n    if(rules.required) {\r\n      valid = value.trim() !== \"\" && valid;\r\n    }\r\n\r\n    return valid;\r\n  }\r\n\r\n  // counties changed handler\r\n  const countriesChangedHandler = (value) => {\r\n    // get country\r\n    const selectedCountry = countries.find(country => country.name === value);\r\n    // get ISO code\r\n    const countryCode = selectedCountry.isoCode;\r\n    // states and cities\r\n    let states;\r\n    let cities;\r\n    // field validation\r\n    let countryIsValid = checkInputValidity(state.requestForm.countries.validation, value);\r\n    let touched = true;\r\n    let cityIsValid = false;\r\n\r\n    dispatch({type: \"COUNTRY_CHANGED\", country: value, touched: touched, countryIsValid: countryIsValid, cityIsValid: cityIsValid});\r\n\r\n    if(value === \"United States\") {\r\n      states = csc.getStatesOfCountry(countryCode);\r\n      dispatch({\r\n        type: \"GET_STATES_BY_COUNTRY\", \r\n        states: states,\r\n        cityIsValid: cityIsValid\r\n      });\r\n    } else {\r\n      cities = csc.getCitiesOfCountry(countryCode);\r\n      let defaultCityValue;\r\n\r\n      if(cities.length === 0) {\r\n        cityIsValid = true;\r\n        defaultCityValue = \"no cities for current country\";\r\n      } else {\r\n        cityIsValid = false;\r\n        defaultCityValue = \"your city\";\r\n      }\r\n\r\n      dispatch({\r\n        type: \"GET_CITIES_BY_COUNTRY\", \r\n        cities: cities, \r\n        cityIsValid: cityIsValid,\r\n        defaultValue: defaultCityValue\r\n      });\r\n    }\r\n  };\r\n\r\n  // states changed handler\r\n  const statesChangedHandler = (value) => {\r\n    // get state\r\n    const selectedState = states.find(state => state.name === value);\r\n    const stateCode = selectedState.isoCode;\r\n    const countryCode = selectedState.countryCode;\r\n    const citiesByState = csc.getCitiesOfState(countryCode, stateCode);\r\n\r\n    dispatch({\r\n      type: \"STATE_CHANGED\", \r\n      state: value\r\n    });\r\n\r\n    let cityFieldValid;\r\n    let defaultCityValue;\r\n\r\n    if(citiesByState.length === 0) {\r\n      cityFieldValid = true;\r\n      defaultCityValue = \"no cities for current state\";\r\n    } else {\r\n      cityFieldValid = false;\r\n      defaultCityValue = \"your city\";\r\n    }\r\n\r\n    dispatch({\r\n      type: \"GET_CITIES_BY_STATE\",\r\n      cities: citiesByState,\r\n      valid: cityFieldValid,\r\n      defaultValue: defaultCityValue\r\n    });\r\n  };\r\n\r\n  // cities changed handler\r\n  const citiesChangedHandler = (value) => {\r\n    let isValid = checkInputValidity(state.requestForm.countries.validation, value);\r\n    let touched = true;\r\n\r\n    dispatch({\r\n      type: \"CITY_CHANGED\", \r\n      city: value,\r\n      touched: touched,\r\n      valid: isValid\r\n    });\r\n  };\r\n\r\n  // useReducer\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    requestForm: {\r\n      countries: {\r\n        id: \"countries\",\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          label: {\r\n            for: \"countries\",\r\n            name: \"Choose Country: \"\r\n          },\r\n          atributes: {\r\n            name: \"countries\" \r\n          },\r\n          options: countries\r\n        },\r\n        value: \"\",\r\n        defaultValue: \"your country\",\r\n        disabled: false,\r\n        onChangeHandler: countriesChangedHandler,\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false,\r\n        valid: false\r\n      },\r\n      states: {\r\n        id: \"states\",\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          label: {\r\n            for: \"states\",\r\n            name: \"Choose State: \"\r\n          },\r\n          atributes: {\r\n            name: \"states\" \r\n          },\r\n          options: []\r\n        },\r\n        value: \"\",\r\n        defaultValue: \"your state\",\r\n        disabled: true,\r\n        onChangeHandler: statesChangedHandler,\r\n        validation: {\r\n          required: false\r\n        },\r\n        touched: false,\r\n        valid: true\r\n      },\r\n      cities: {\r\n        id: \"cities\",\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          label: {\r\n            for: \"cities\",\r\n            name: \"Choose City: \"\r\n          },\r\n          atributes: {\r\n            name: \"cities\" \r\n          },\r\n          options: []\r\n        },\r\n        value: \"\",\r\n        defaultValue: \"your city\",\r\n        disabled: true,\r\n        onChangeHandler: citiesChangedHandler,\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false,\r\n        valid: false\r\n      }\r\n    },\r\n    formIsValid: false\r\n  });\r\n\r\n  // check if all fields are valid\r\n  useEffect(() => {\r\n    let formValidity = false;\r\n    let validValues = [];\r\n    for(const key in state.requestForm) {\r\n      validValues.push(state.requestForm[key].valid);\r\n    }\r\n\r\n    validValues.forEach(value => {\r\n      if(value === true) {\r\n        formValidity = true;\r\n      } else {\r\n        formValidity = false;\r\n      }\r\n    })\r\n    dispatch({type: \"FORM_VALIDITY\", formIsValid: formValidity});\r\n    \r\n  }, [state.requestForm]);\r\n\r\n  // check for request errors and close redirect modal\r\n  useEffect(() => {\r\n    if(isError !== null) {\r\n      hideRedirectModal();\r\n      dispatch({type: \"INVALIDATE_FORM\"});\r\n    }\r\n  }, [isError]);\r\n\r\n  // transform request form into array\r\n  const formElements = [];\r\n  for(const key in state.requestForm) {\r\n    formElements.push({\r\n      id: key,\r\n      config: state.requestForm[key]\r\n    });\r\n  }\r\n\r\n  // requesting tour action\r\n  const onRequestTour = (tourData, token) => reduxDispatch(actions.reqTour(tourData, token));\r\n  // form submit\r\n  const formSubmitHanlder = (e) => {\r\n    e.preventDefault();\r\n    let currentCountry = csc.getAllCountries().find(country => country.name === state.requestForm.countries.value);\r\n    let countryCode = currentCountry.isoCode;\r\n    let tourData = {\r\n      country: state.requestForm.countries.value,\r\n      state: state.requestForm.states.value,\r\n      city: state.requestForm.cities.value,\r\n      code: countryCode,\r\n      userId: userID\r\n    };\r\n\r\n    onRequestTour(tourData, isAuth);\r\n    dispatch({type: \"CLEAR_INPUT_FIELDS\"});\r\n    // dispatch({type: \"INVALIDATE_FORM\"});\r\n    showRedirectModal();\r\n  };\r\n\r\n  // form UI\r\n  let form;\r\n  if(isAuth) {\r\n    form = (\r\n      <Form\r\n        formClassname=\"request-tour\"\r\n        formBtnText=\"send request\"\r\n        formIsValid={state.formIsValid}\r\n        formSubmitHandler={formSubmitHanlder}>\r\n        {formElements.map(element => {\r\n          const {id, config: {elementType, elementConfig, value, disabled, onChangeHandler, defaultValue}} = element;\r\n          return <Input\r\n            key={id}\r\n            elementType={elementType}\r\n            elementConfig={elementConfig}\r\n            value={value}\r\n            disabledInfo={disabled}\r\n            defaultValue={defaultValue}\r\n            inputChanged={(event) => onChangeHandler(event.target.value)} />\r\n        })}\r\n      </Form>\r\n    );\r\n  }\r\n  if(isAuth === null) {\r\n    form = (\r\n      <div style={{textAlign: \"center\", paddingBottom: \"2rem\"}}>\r\n        <p style={{fontSize: \"2.5rem\", marginBottom: \"2rem\"}}>You need to sign up in order to request a tour</p>\r\n        <Link to=\"/signup\" style={{backgroundColor: \"lightblue\", width: \"15rem\", margin: \"0 auto\", fontSize: \"1.8rem\", padding: \"0.7rem 0\", color: \"white\", fontWeight: \"bold\", borderRadius: \"0.5rem\"}}>Sign up</Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if(isLoading) {\r\n    form = <Spinner />;\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <SectionTitle\r\n        titleClassname=\"require-tour\"\r\n        icon={<AiOutlinePullRequest />}\r\n        titleText=\"request tour\"\r\n        titleAdditional=\"choose your destination\" />\r\n      <RedirectModal\r\n        redirectModalShow={redirectModalShow}\r\n        redirectModalClosed={hideRedirectModal}\r\n        redirectModalTitle=\"tour request successful\" />\r\n      <ErrorModal\r\n        errorModalShow={isError !== null}\r\n        errorModalClosed={onClearRequestError}\r\n        errorModalMsg=\"Something went wrong. Refresh the page and try again.\" />\r\n      <section className=\"request-tour__content\">\r\n        <p className=\"request-tour__text\">\r\n          Choose where would you like to travel. Select prefered country, state and city, fill the form and send us the request. After you are done, you can come back and request more. You can check your request, along with your past, present and future touring history <Link to=\"/your-page\" style={{display: \"inline-block\", color: \"red\", textDecoration: \"underline\"}}>here</Link>.\r\n          <br />\r\n          <br />\r\n          <span style={{color: \"red\"}}>NOTE: </span>choosing state is required ONLY if country is United States. \r\n        </p>\r\n        <article className=\"request-tour__request\">\r\n          <h3 className=\"request-tour__request-title\">\r\n            request your tour here\r\n          </h3>\r\n          {form}\r\n        </article>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RequireTour;\r\n"],"sourceRoot":""}