{"version":3,"sources":["components/UI/ErrorModal/ErrorModal.js","components/UI/Spinner/Spinner.js","components/UI/RedirectModal/RedirectModal.js","custom-hooks/useRedirectModal.js","components/UI/Form/Form.js","components/UI/Input/Input.js","images/signup/book-tour.jpg","images/signup/request-tour.jpg","images/signup/review.jpg","data/Signup/signUpInfo.js","pages/SignUp/SignUp.js"],"names":["ErrorModal","props","show","errorModalShow","backdropClicked","errorModalClosed","mountOnEnter","unmountOnExit","in","timeout","classNames","className","errorModalMsg","type","onClick","Spinner","RedirectModal","dispatch","useDispatch","redirectModalShow","redirectModalClosed","redirectModalTitle","to","actions","useRedirectModal","useState","setRedirectModalShow","showRedirectModal","hideRedirectModal","Form","formClassname","children","style","display","signUpButtonShown","disabled","formIsValid","formSubmitHandler","formBtnText","Input","elementType","elementConfig","inputChanged","inputUnfocused","value","disabledInfo","defaultValue","readOnly","shouldValidate","inputTouched","inputValid","inputWarning","inputWarningShown","inputWarningShowHandler","inputFieldClasses","push","input","warningMessageClasses","join","atributes","onChange","onBlur","htmlFor","label","for","name","id","hidden","options","map","option","uuid","signUpInfo","title","titleIcon","image","imgBook","text","link","linkName","imgRequest","imgReview","SignUp","isAuth","useSelector","state","auth","token","isError","error","isLoading","loading","authSuccessState","authSuccess","onAuth","userData","formMethod","useQuestionModal","questionModalData","showQuestionModal","closeQuestionModal","useEffect","serbiaCities","csc","getCitiesOfCountry","setFormMethod","firstName","placeholder","validation","required","touched","valid","lastName","country","warningText","warningTextShown","city","phone","initialValue","minLength","length","isPhone","email","isEmail","password","confirmPassword","passwordRequired","signUpForm","setSignUpForm","logInForm","setLogInForm","signUpFormIsValid","setSignUpFormIsValid","logInFormIsValid","setLogInFormIsValid","checkInputValidity","rules","isValid","trim","test","includes","isNaN","slice","confirmPasswordEnabled","prevState","checkFormValidity","currentForm","setFormValidity","inputsValid","key","signUpFormElements","config","logInFormElements","formDisplayed","authMethodName","authQuestion","authMethodSwitch","formValidity","displayFormByMethod","formElements","changedHandler","element","setTimeout","showWarningTextsHandler","event","checkValidityAfterFocus","width","margin","textAlign","fontSize","fontWeight","marginBottom","padding","outline","border","backgroundColor","color","cursor","target","actualForm","preventDefault","QuestionModal","questionModalShow","questionModalTitle","questionModalText","questionModalCancel","questionModalConfirm","errorMsg","message","returnErrorMsg","SectionTitle","titleClassname","icon","titleText","titleAdditional","info","src","alt"],"mappings":"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","file":"static/js/6.8fd61527.chunk.js","sourcesContent":["import React from 'react';\r\nimport './error-modal.scss';\r\nimport '../../../sass-additions/helper-classes.scss';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\n\r\nconst ErrorModal = props => {\r\n  return (\r\n    <>\r\n      <Backdrop\r\n        show={props.errorModalShow}\r\n        backdropClicked={props.errorModalClosed} />\r\n      <CSSTransition\r\n        mountOnEnter\r\n        unmountOnExit\r\n        in={props.errorModalShow}\r\n        timeout={300}\r\n        classNames=\"show\">\r\n        <div className=\"error-modal\">\r\n          <p className=\"error-modal__title\">\r\n            Error occured\r\n          </p>\r\n          <p className=\"error-modal__message\">\r\n            {props.errorModalMsg}\r\n          </p>\r\n          <button \r\n            type=\"button\"\r\n            className=\"error-modal__btn\"\r\n            onClick={props.errorModalClosed}>\r\n              OK\r\n            </button>\r\n        </div>\r\n      </CSSTransition>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ErrorModal\r\n","import React from 'react';\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      loading...\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport './redirect-modal.scss';\r\nimport '../../../sass-additions/helper-classes.scss';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nconst RedirectModal = props => {\r\n  const dispatch = useDispatch();\r\n  // logout action\r\n  const onLogout = () => dispatch(actions.logout());\r\n  // logout and close modal\r\n  const logoutAndCloseModal = () => {\r\n    onLogout();\r\n    props.redirectModalClosed();\r\n  };\r\n  return (\r\n    <>\r\n      <Backdrop\r\n        show={props.redirectModalShow}\r\n        backdropClicked={props.redirectModalClosed} />\r\n      <CSSTransition\r\n        mountOnEnter\r\n        unmountOnExit\r\n        in={props.redirectModalShow}\r\n        timeout={300}\r\n        classNames=\"show\">\r\n        <div className=\"redirect-modal\">\r\n          <h3 className=\"redirect-modal__title\">\r\n            {props.redirectModalTitle}\r\n          </h3>\r\n          <div className=\"redirect-modal__content\">\r\n            <Link to=\"/\" onClick={props.redirectModalClosed}>go home</Link>\r\n            <Link to=\"/your-page\" onClick={props.redirectModalClosed}>go to your page</Link>\r\n            <Link to=\"/tours\" onClick={props.redirectModalClosed}>view tours</Link>\r\n            <Link to=\"/leave-review\" onClick={props.redirectModalClosed}>leave review</Link>\r\n            <Link to=\"/request-tour\" onClick={props.redirectModalClosed}>request tour</Link>\r\n            <button \r\n              className=\"redirect-modal__logout\"\r\n              onClick={logoutAndCloseModal}>logout</button>\r\n          </div>\r\n          <button \r\n            className=\"redirect-modal__btn\"\r\n            onClick={props.redirectModalClosed}>\r\n            close\r\n          </button>\r\n        </div>\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RedirectModal;\r\n","import { useState } from 'react';\r\n\r\nexport const useRedirectModal = () => {\r\n  const [redirectModalShow, setRedirectModalShow] = useState(false);\r\n\r\n  const showRedirectModal = () => {\r\n    setRedirectModalShow(true);\r\n  };\r\n  const hideRedirectModal = () => {\r\n    setRedirectModalShow(false);\r\n  };\r\n\r\n  return {\r\n    redirectModalShow,\r\n    showRedirectModal,\r\n    hideRedirectModal\r\n  };\r\n};","import React from 'react';\r\nimport './form.scss';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form className={`form form__${props.formClassname}`}>\r\n      {props.children}\r\n      <button \r\n        type=\"submit\"\r\n        className=\"form__submit-btn\"\r\n        style={{display: props.signUpButtonShown ? \"none\" : \"block\"}}\r\n        disabled={!props.formIsValid}\r\n        onClick={props.formSubmitHandler}>\r\n        {props.formBtnText}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './input.scss';\r\nimport { v4 as uuid} from 'uuid';\r\nimport { RiErrorWarningLine } from 'react-icons/ri';\r\n\r\nconst Input = ({elementType, elementConfig, inputChanged, inputUnfocused, value, disabledInfo, defaultValue, readOnly, shouldValidate, inputTouched, inputValid, inputWarning, inputWarningShown, inputWarningShowHandler}) => {\r\n  let inputFieldClasses = [\"generic-input__field\"];\r\n\r\n  if(shouldValidate && inputTouched && inputValid) {\r\n    inputFieldClasses.push(\"field-valid\");\r\n  }\r\n  if(shouldValidate && inputTouched && !inputValid) {\r\n    inputFieldClasses.push(\"field-invalid\");\r\n  }\r\n  let input = null;\r\n\r\n  let warningMessageClasses = [\"generic-input__message\"];\r\n\r\n  if(inputWarningShown) {\r\n    warningMessageClasses.push(\"warning-shown\");\r\n  }\r\n\r\n  switch(elementType) {\r\n    case \"inputText\":\r\n      input = (\r\n        <div className=\"generic-input\">\r\n          <div className={warningMessageClasses.join(\" \")}>\r\n            <div className=\"generic-input__message-icon\">\r\n              <RiErrorWarningLine />\r\n            </div>\r\n            <p className=\"generic-input__message-text\">\r\n              {inputWarning}\r\n            </p>\r\n          </div>\r\n          <input \r\n            className={inputFieldClasses.join(\" \")} \r\n            {...elementConfig.atributes} \r\n            value={value} \r\n            readOnly={readOnly} \r\n            onChange={inputChanged} \r\n            disabled={disabledInfo}\r\n            onBlur={inputUnfocused}\r\n            onClick={inputWarningShowHandler} />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"inputNumber\":\r\n      input = (\r\n        <div className=\"generic-input\">\r\n          <label htmlFor={elementConfig.label.for} style={{display: elementConfig.label.show ? \"block\" : \"none\"}}>\r\n            {elementConfig.label.name}\r\n          </label>\r\n          <input \r\n            className={inputFieldClasses.join(\" \")} \r\n            {...elementConfig.atributes} \r\n            value={value} \r\n            readOnly={readOnly} \r\n            onChange={inputChanged} \r\n            disabled={disabledInfo}\r\n            onBlur={inputUnfocused}\r\n            onClick={inputWarningShowHandler} />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      input = (\r\n        <div className=\"generic-input\">\r\n          <label htmlFor={elementConfig.label.for}>\r\n            {elementConfig.label.name}\r\n          </label>\r\n          <textarea id={elementConfig.label.for} {...elementConfig.atributes} value={value} className={inputFieldClasses.join(\" \")} onChange={inputChanged} onBlur={inputUnfocused}></textarea>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"select\":\r\n      input = (\r\n        <div className={`generic-input ${disabledInfo && \"field-disabled\"}`}>\r\n          <label \r\n            htmlFor={elementConfig.label.for}>\r\n            {elementConfig.label.name}\r\n          </label>\r\n          <select\r\n            className=\"generic-input__field\"\r\n            id={elementConfig.label.for}\r\n            name={elementConfig.atributes.name}\r\n            value={value || \"default\"}\r\n            onChange={inputChanged}\r\n            disabled={disabledInfo}>\r\n              <option \r\n                value=\"choose\" \r\n                hidden>\r\n                {defaultValue}\r\n              </option>\r\n            {elementConfig.options.map(option => (\r\n              <option\r\n                key={uuid()}\r\n                value={option.name}>\r\n                {option.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      );\r\n      break;\r\n    default:\r\n      input = <input />;\r\n  }\r\n  return input;\r\n}\r\n\r\nexport default Input;\r\n","export default __webpack_public_path__ + \"static/media/book-tour.0fc973df.jpg\";","export default __webpack_public_path__ + \"static/media/request-tour.e48b4b2a.jpg\";","export default __webpack_public_path__ + \"static/media/review.f1a6bd05.jpg\";","import React from 'react';\r\n//images\r\nimport imgBook from '../../images/signup/book-tour.jpg';\r\nimport imgRequest from '../../images/signup/request-tour.jpg';\r\n// import imgCommunity from '../../images/signup/online-community.png';\r\nimport imgReview from '../../images/signup/review.jpg';\r\n//icons\r\nimport { BsBookmarkCheck } from 'react-icons/bs';\r\nimport { GoRequestChanges } from 'react-icons/go';\r\n// import { IoIosPeople } from 'react-icons/io';\r\nimport { MdRateReview } from 'react-icons/md';\r\n\r\nexport const signUpInfo = [\r\n  {\r\n    id: \"signup-book\",\r\n    title: \"book your tour from home\",\r\n    titleIcon: <BsBookmarkCheck />,\r\n    image: imgBook,\r\n    text: \"Book your tour from the comfort of your home right now.\",\r\n    link: \"/tours\",\r\n    linkName: \"see tours\"\r\n  },\r\n  {\r\n    id: \"signup-request\",\r\n    title: \"request tour according to your wishes\",\r\n    titleIcon: <GoRequestChanges />,\r\n    image: imgRequest,\r\n    text: \"Tell us where would you like to travel. Request the destination and we'll see what we can do.\",\r\n    link: \"/request-tour\",\r\n    linkName: \"request a tour\"\r\n  },\r\n  // {\r\n  //   id: \"signup-community\",\r\n  //   title: \"join online community\",\r\n  //   titleIcon: <IoIosPeople />,\r\n  //   image: imgCommunity,\r\n  //   text: \"Meet other travel enthusiasts and see their experiences\",\r\n  //   link: \"/online-community\",\r\n  //   linkName: \"view community\"\r\n  // },\r\n  {\r\n    id: \"signup-review\",\r\n    title: \"leave a review\",\r\n    titleIcon: <MdRateReview />,\r\n    image: imgReview,\r\n    text: \"What are your experiences from traveling with us? Leave your comment.\",\r\n    link: \"/leave-review\",\r\n    linkName: \"leave review\"\r\n  },\r\n];","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './sign-up.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport SectionTitle from '../../components/SectionTitle/SectionTitle';\r\nimport Form from '../../components/UI/Form/Form';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport QuestionModal from '../../components/UI/QuestionModal/QuestionModal';\r\nimport ErrorModal from '../../components/UI/ErrorModal/ErrorModal';\r\nimport RedirectModal from '../../components/UI/RedirectModal/RedirectModal';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { useRedirectModal } from '../../custom-hooks/useRedirectModal';\r\nimport { useQuestionModal } from '../../custom-hooks/useQuestionModal';\r\nimport { GoSignIn } from 'react-icons/go';\r\nimport { signUpInfo } from '../../data/Signup/signUpInfo';\r\nimport csc from 'country-state-city';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst SignUp = () => {\r\n  const dispatch = useDispatch();\r\n  // is Auth state\r\n  const isAuth = useSelector(state => state.auth.token);\r\n  // error state\r\n  const isError = useSelector(state => state.auth.error);\r\n  // loading state\r\n  const isLoading = useSelector(state => state.auth.loading);\r\n  // auth success state\r\n  const authSuccessState = useSelector(state => state.auth.authSuccess);\r\n\r\n  // set error message\r\n  const returnErrorMsg = () => {\r\n    let errorMsg = \"Something went wrong. Try different email or password.\"\r\n\r\n    if(isError && isError.message === \"EMAIL_NOT_FOUND\") {\r\n      errorMsg = \"Email doesn't exist in out database. Try again of try signing up.\";\r\n    } \r\n    if(isError && isError.message === \"INVALID_PASSWORD\") {\r\n      errorMsg = \"Wrong password entered.\";\r\n    }\r\n    if(isError && isError.message === \"EMAIL_EXISTS\") {\r\n      errorMsg = \"Email that you entered is already registered in our database. Try with another one, or simply log in.\"\r\n    }\r\n\r\n    return errorMsg;\r\n  };\r\n  // auth action\r\n  const onAuth = (userData, formMethod) => dispatch(actions.auth(userData, formMethod));\r\n  // logout action\r\n  const onLogout = () => dispatch(actions.logout());\r\n  // clear error action\r\n  const onClearError = () => dispatch(actions.clearError());\r\n  // clear auth succes state\r\n  const onClearAuthSuccessState = () => dispatch(actions.clearAuthSuccessState());\r\n  // use question modal\r\n  const { questionModalData, showQuestionModal, closeQuestionModal } = useQuestionModal();\r\n  \r\n  // redirect modal\r\n  const {redirectModalShow, showRedirectModal, hideRedirectModal} = useRedirectModal();\r\n  // hide redirect modal while clearing auth suc.state\r\n  const rediredctModalClosed = () => {\r\n    onClearAuthSuccessState();\r\n    hideRedirectModal()\r\n  };\r\n  // check auth succes state for opening redirect modal\r\n  useEffect(() => {\r\n    if(isError === null && authSuccessState) {\r\n      showRedirectModal();\r\n    }\r\n  }, [isError, authSuccessState]);\r\n  // logout\r\n  const confirmLogout = () => {\r\n    onLogout();\r\n    closeQuestionModal();\r\n  };\r\n  // get cities of Serbia\r\n  const serbiaCities = csc.getCitiesOfCountry(\"RS\");\r\n  // form method (signup or log in)\r\n  const [formMethod, setFormMethod] = useState(\"signup\");\r\n  // sign up form\r\n  const [signUpForm, setSignUpForm] = useState({\r\n    firstName: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"text\",\r\n          name: \"firstName\",\r\n          placeholder: \"First Name\"\r\n        },\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n    lastName: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"text\",\r\n          name: \"lastName\",\r\n          placeholder: \"Last Name\"\r\n        }\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n    country: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"text\",\r\n          name: \"country\",\r\n          placeholder: \"Country\"\r\n        }\r\n      },\r\n      value: \"Serbia\",\r\n      validation: {\r\n        required: true\r\n      },\r\n      disabled: false,\r\n      readOnly: true,\r\n      touched: true,\r\n      valid: true,\r\n      warningText: \"We only operate from Serbia, for now\",\r\n      warningTextShown: false\r\n    },\r\n    city: {\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          name: \"city\",\r\n          placeholder: \"City\"\r\n        },\r\n        options: serbiaCities\r\n      },\r\n      value: \"\",\r\n      defaultValue: \"Choose city\",\r\n      validation: {\r\n        required: true\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n    phone: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"tel\",\r\n          name: \"phone\",\r\n          placeholder: \"Phone\"\r\n        }\r\n      },\r\n      value: \"00381\",\r\n      validation: {\r\n        required: true,\r\n        initialValue: \"00381\",\r\n        minLength: \"00381\".length + 8,\r\n        isPhone: true\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false,\r\n      warningText: \"Must start with serbian code - 00381\",\r\n      warningTextShown: false\r\n    },\r\n    email: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"email\",\r\n          name: \"email\",\r\n          placeholder: \"Email\"\r\n        }\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n    password: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"password\",\r\n          name: \"password\",\r\n          placeholder: \"Password\"\r\n        }\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 6\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n    confirmPassword: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"password\",\r\n          name: \"confirmPassword\",\r\n          placeholder: \"Confirm Password\"\r\n        }\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        passwordRequired: true\r\n      },\r\n      disabled: true,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n  });\r\n  // log in form\r\n  const [logInForm, setLogInForm] = useState({\r\n    email: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"email\",\r\n          name: \"email\",\r\n          placeholder: \"Email\"\r\n        }\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    },\r\n    password: {\r\n      elementType: \"inputText\",\r\n      elementConfig: {\r\n        label: {\r\n          for: null\r\n        },\r\n        atributes: {\r\n          type: \"password\",\r\n          name: \"password\",\r\n          placeholder: \"Password\"\r\n        }\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 6\r\n      },\r\n      disabled: false,\r\n      touched: false,\r\n      valid: false\r\n    }\r\n  });\r\n  // state for checking form validity\r\n  const [signUpFormIsValid, setSignUpFormIsValid] = useState(false);\r\n  const [logInFormIsValid, setLogInFormIsValid] = useState(false);\r\n\r\n  // check input validity\r\n  const checkInputValidity = (rules, value) => {\r\n    let isValid = true;\r\n    if(!rules) {\r\n      return true;\r\n    }\r\n    if(rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if(rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && value.trim() !== \"\" && isValid;\r\n    }\r\n    if(rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if(rules.initialValue) {\r\n      isValid = value.includes(rules.initialValue) && isValid;\r\n    }\r\n    if(rules.isPhone) {\r\n      isValid = !isNaN(value.slice(5)) && isValid;\r\n    }\r\n    if(rules.passwordRequired) {\r\n      isValid = signUpForm.password.value.trim() !== \"\" && value === signUpForm.password.value && isValid;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  // show warning texts where it's required (sign up for only)\r\n  const showWarningTextsHandler = (element) => {\r\n    if(element === \"country\" || element === \"phone\") {\r\n      setSignUpForm(prevState => {\r\n        return {\r\n          ...prevState,\r\n          [element]: {\r\n            ...prevState[element],\r\n            warningTextShown: true\r\n          }\r\n        }\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setSignUpForm(prevState => {\r\n        return {\r\n          ...prevState,\r\n          [element]: {\r\n            ...prevState[element],\r\n            warningTextShown: false\r\n          }\r\n        }\r\n      });\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  // check valitidy when unfocused\r\n  const checkValidityAfterFocus = (element) => {\r\n    if(formMethod === \"signup\") {\r\n      setSignUpForm(prevState => {\r\n        return {\r\n          ...prevState,\r\n          [element]: {\r\n            ...prevState[element],\r\n            touched: true\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if(formMethod === \"login\") {\r\n      setLogInForm(prevState => {\r\n        return {\r\n          ...prevState,\r\n          [element]: {\r\n            ...prevState[element],\r\n            touched: true\r\n          }\r\n        }\r\n      });\r\n    } \r\n  };\r\n\r\n  // input changed handlers\r\n  const signUpInputsChangedHandler = (event, element) => {\r\n    setSignUpForm(prevState => {\r\n      return {\r\n        ...prevState,\r\n        [element]: {\r\n          ...prevState[element],\r\n          value: event.target.value,\r\n          touched: true,\r\n          valid: checkInputValidity(prevState[element].validation, event.target.value)\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const logInInputsChangedHandler = (event, element) => {\r\n    setLogInForm(prevState => {\r\n      return {\r\n        ...prevState,\r\n        [element]: {\r\n          ...prevState[element],\r\n          value: event.target.value,\r\n          touched: true,\r\n          valid: checkInputValidity(prevState[element].validation, event.target.value)\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  // manage enability of confirmPassword field\r\n  useEffect(() => {\r\n    let confirmPasswordEnabled;\r\n    if(signUpForm.password.valid) {\r\n      confirmPasswordEnabled = false;\r\n    } else {\r\n      confirmPasswordEnabled = true;\r\n    }\r\n    setSignUpForm(prevState => {\r\n      return {\r\n        ...prevState,\r\n        confirmPassword: {\r\n          ...prevState.confirmPassword,\r\n          disabled: confirmPasswordEnabled\r\n        }\r\n      }\r\n    })\r\n  }, [signUpForm.password.valid]);\r\n\r\n  // check form validity method\r\n  const checkFormValidity = (currentForm, setFormValidity) => {\r\n    let inputsValid = [];\r\n    for(const key in currentForm) {\r\n      inputsValid.push(currentForm[key].valid);\r\n    }\r\n\r\n    if(!inputsValid.includes(false)) {\r\n      setFormValidity(true)\r\n    } else {\r\n      setFormValidity(false)\r\n    }\r\n  };\r\n\r\n  // check signup form's validity\r\n  useEffect(() => {\r\n    checkFormValidity(signUpForm, setSignUpFormIsValid);\r\n  }, [signUpForm]);\r\n\r\n  // check login form's validity\r\n  useEffect(() => {\r\n    checkFormValidity(logInForm, setLogInFormIsValid);\r\n  }, [logInForm]);\r\n\r\n  // store sign up elements\r\n  const signUpFormElements = [];\r\n  for(const key in signUpForm) {\r\n    signUpFormElements.push({\r\n      id: key,\r\n      config: signUpForm[key]\r\n    })\r\n  }\r\n  // store log in elements\r\n  const logInFormElements = [];\r\n  for(const key in logInForm) {\r\n    logInFormElements.push({\r\n      id: key,\r\n      config: logInForm[key]\r\n    })\r\n  }\r\n\r\n  // change form method\r\n  const changeFormMethod = () => {\r\n    if(formMethod === \"signup\") {\r\n      setFormMethod(\"login\");\r\n    }\r\n    if(formMethod === \"login\") {\r\n      setFormMethod(\"signup\");\r\n    }\r\n  };\r\n\r\n  // form submit handler\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    if(formMethod === \"signup\") {\r\n      onAuth(signUpForm, formMethod);\r\n\r\n    } else {\r\n      onAuth(logInForm, formMethod);\r\n    }\r\n    // showRedirectModal();\r\n  };\r\n\r\n  const displayFormByMethod = (formElements, changedHandler) => {\r\n    let formDisplayed = formElements.map(element => {\r\n      const {id, config: {elementType, elementConfig, value, defaultValue, disabled, readOnly, touched, valid, validation, warningText, warningTextShown}} = element;\r\n\r\n      return <Input\r\n          key={id}\r\n          elementType={elementType}\r\n          elementConfig={elementConfig}\r\n          value={value}\r\n          defaultValue={defaultValue}\r\n          disabledInfo={disabled}\r\n          readOnly={readOnly}\r\n          shouldValidate={validation.required}\r\n          inputTouched={touched}\r\n          inputValid={valid}\r\n          inputWarning={warningText}\r\n          inputWarningShown={warningTextShown}\r\n          inputWarningShowHandler={() => showWarningTextsHandler(element.id)}\r\n          inputChanged={(event) => changedHandler(event, element.id)}\r\n          inputUnfocused={() => checkValidityAfterFocus(element.id)} />\r\n    })\r\n\r\n    return formDisplayed;\r\n  }\r\n\r\n  let formDisplayed;\r\n  let authMethodName;\r\n  let authQuestion;\r\n  let authMethodSwitch;\r\n  let formValidity;\r\n  if(formMethod === \"signup\" && !isAuth) {\r\n    formDisplayed = displayFormByMethod(signUpFormElements, signUpInputsChangedHandler);\r\n    authMethodName = \"sign up\";\r\n    authQuestion = \"Already have an account?\";\r\n    authMethodSwitch = \"log in\";\r\n    formValidity = signUpFormIsValid;\r\n  } else if(formMethod === \"login\" && !isAuth) {\r\n    formDisplayed = displayFormByMethod(logInFormElements, logInInputsChangedHandler);\r\n    authMethodName = \"log in\";\r\n    authQuestion = \"Don't have an account?\";\r\n    authMethodSwitch = \"sign up\";\r\n    formValidity = logInFormIsValid;\r\n  } else if(isAuth) {\r\n    formDisplayed = (\r\n      <div style={{\r\n        width: \"90%\",\r\n        margin: \"0 auto\",\r\n        textAlign: \"center\"\r\n      }}>\r\n        <p style={{\r\n          fontSize: \"3.5rem\",\r\n          fontWeight: \"bold\",\r\n          marginBottom: \"2rem\"\r\n        }}>You are logged in</p>\r\n        <button \r\n          type=\"button\"\r\n          style={{\r\n            fontSize: \"1.9rem\",\r\n            fontWeight: \"bold\",\r\n            padding: \"1rem 0\",\r\n            width: \"15rem\",\r\n            outline: \"none\",\r\n            border: \"none\",\r\n            backgroundColor: \"salmon\",\r\n            color: \"white\",\r\n            cursor: \"pointer\"\r\n          }}\r\n          onClick={() => showQuestionModal(\"logging out\", \"Are you sure you want to log out?\")}>Log out</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  let actualForm = (\r\n    <Form\r\n      formClassname=\"signup\"\r\n      formIsValid={formValidity}\r\n      formBtnText={formMethod === \"signup\" ? \"sign up\" : \"log in\"}\r\n      signUpButtonShown={isAuth}\r\n      formSubmitHandler={formSubmitHandler}>\r\n        {formDisplayed}\r\n    </Form>\r\n  );\r\n\r\n  if(isLoading) {\r\n    actualForm = <Spinner />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <RedirectModal\r\n        redirectModalShow={redirectModalShow}\r\n        redirectModalClosed={rediredctModalClosed}\r\n        redirectModalTitle=\"you are logged in\" />\r\n      <QuestionModal \r\n        questionModalShow={questionModalData.show}\r\n        questionModalTitle={questionModalData.title}\r\n        questionModalText={questionModalData.text}\r\n        questionModalCancel={closeQuestionModal}\r\n        questionModalConfirm={confirmLogout} />\r\n      <ErrorModal\r\n        errorModalShow={isError !== null}\r\n        errorModalMsg={returnErrorMsg()}\r\n        errorModalClosed={onClearError} />\r\n      <SectionTitle\r\n        titleClassname=\"signup\"\r\n        icon={<GoSignIn />}\r\n        titleText=\"sign up\"\r\n        titleAdditional=\"...or log in\" />\r\n      <section className=\"signup__content\">\r\n        <article className=\"signup__info\">\r\n          <h3 className=\"signup__info-title\">\r\n            after you become our member you can:\r\n          </h3>\r\n          <ul className=\"signup__info-list\">\r\n            {signUpInfo.map(info => {\r\n              const {id, title, titleIcon, image, text, link, linkName} = info;\r\n              return (\r\n                <li\r\n                  key={id}\r\n                  className=\"signup__info-item\">\r\n                  <div className=\"signup__info-item__title\">\r\n                    <div className=\"signup__info-item__icon\">\r\n                      {titleIcon}\r\n                    </div>\r\n                    <p className=\"signup__info-item__title-text\">\r\n                      {title}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"signup__info-item__main\">\r\n                    <div className=\"signup__info-item__main-info\">\r\n                      <p className=\"signup__info-item__main-text\">\r\n                        {text}\r\n                      </p>\r\n                      <Link className=\"signup__info-item__link\" to={link}>\r\n                        {linkName}\r\n                      </Link>\r\n                    </div>\r\n                    <img className=\"signup__info-item__main-img\" src={image} alt={id} />\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </article>\r\n        <article className=\"signup__form\">\r\n          <h3 \r\n            className=\"signup__form-title\"\r\n            style={{display: isAuth ? \"none\" : \"block\"}}>\r\n            enter your info to {authMethodName}\r\n          </h3>\r\n          {actualForm}\r\n          <p \r\n            className=\"signup__form-check\"\r\n            style={{display: isAuth ? \"none\" : \"block\"}}>\r\n            {authQuestion}\r\n          </p>\r\n          <button \r\n            type=\"button\"\r\n            className=\"signup__form-switch\"\r\n            style={{display: isAuth ? \"none\" : \"block\"}}\r\n            onClick={changeFormMethod}>\r\n            switch to {authMethodSwitch}\r\n          </button>\r\n        </article>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n"],"sourceRoot":""}